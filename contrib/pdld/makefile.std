# Produce Windows executables
# links with PDPCLIB created by makefile.std

VPATH=src;src/bytearray;src/hashtab;src/ftebc


ifeq "$(targ)" "arm"
# Use makefile.war with the ARM versions of the tools
CC=gccprm
CFLAGS=-O0
AS=asprm
AR=arprm
COPTS=-S $(CFLAGS) -Wall -fno-common -I./src -I./src/bytearray \
    -I./src/hashtab -I../pdpclib -D__WIN32__ -D__USEBIVA__ \
    -D__ARM__ -msoft-float -mapcs-32 -fno-leading-underscore \
    -DNO_LONG_LONG -ansi -pedantic-errors -I./src/ftebc
EXTRA1=../pdpclib/w32start.obj
EXTRA2=../pdpclib/armsupa.obj ../pdpclib/fpfuncsa.obj ../pdpclib/msvcrt.lib


else ifeq "$(targ)" "zpg"
# Need to run makefile.zpg first
# We are temporarily using NOFLOAT because hex float isn't currently working
CC=gcc370
CFLAGS=-Os
AS=as370
AR=ar370
COPTS=-S $(CFLAGS) -Wall -fno-common -I./src -I./src/bytearray \
    -I./src/hashtab -I../pdpclib \
    -U__MVS__ -D__MF32__ -D__PDOSGEN__ -D__NOBIVA__ \
    -DNO_LONG_LONG -ansi -pedantic-errors \
    -I../generic -I../src -I./src/ftebc -DNOFLOAT
EXTRA1=--oformat mvs ../pdpclib/pgastart.o



else ifeq "$(targ)" "macarm"
# makefile.m64 needs to have been run in pdpclib first
# untested
CC=clang -S -O0 -D__ARM__ -fno-builtin -D__MACOS__ \
    -D__64BIT__ -fno-stack-protector -D__USEBIVA__ \
    -Wno-error=implicit-function-declaration \
    -I./src -I./src/bytearray \
    -I./src/hashtab -I../pdpclib \
    -I../generic -I../src -I./src/ftebc
AR=ar
AS=as
LD=clang -Wl,-e, -Wl,__start
EXTRA2=../pdpclib/pdpmacos.a


else ifeq "$(targ)" "gccarm64"
# makefile.a64 needs to have been run in pdpclib first
# untested
CC=gcc -S -O2 -D__ARM__ -nostdinc -nostdlib -fno-builtin \
    -D__64BIT__ -fno-stack-protector --no-pie -D__USEBIVA__ \
    -I./src -I./src/bytearray \
    -I./src/hashtab -I../pdpclib \
    -I../generic -I../src -I./src/ftebc
AR=ar
AS=as
LD=gcc -static -s -m64 -nostdlib
EXTRA1=../pdpclib/linstart.o ../pdpclib/pdplinux.a
EXTRA2=../pdpclib/pdplinux.a


else ifeq "$(targ)" "gccamd64"
# makefile.l64 needs to have been run in pdpclib first
# untested
CC=gcc -S -O0 -D__gnu_linux__ -nostdinc -nostdlib -fno-builtin \
    -D__64BIT__ -fno-stack-protector --no-pie -D__USEBIVA__ \
    -m64 -fno-common \
    -I./src -I./src/bytearray \
    -I./src/hashtab -I../pdpclib \
    -I../generic -I../src -I./src/ftebc
AR=ar
AS=as
LD=gcc -s -static -m64 -nostdlib
EXTRA1=../pdpclib/linstart.o ../pdpclib/pdplinux.a
EXTRA2=../pdpclib/pdplinux.a



else
CC=gccwin
CFLAGS=-O2
####CFLAGS=-O2 -DNO_LONG_LONG -ansi -pedantic-errors
AS=pdas --oformat coff
AR=xar
COPTS=-S $(CFLAGS) -Wall -fno-common -I./src -I./src/bytearray \
    -I./src/hashtab -I./src/ftebc -I../pdpclib -D__WIN32__ -D__NOBIVA__
EXTRA1=../pdpclib/w32start.obj
EXTRA2=../pdpclib/msvcrt.lib
endif



LD=pdld
LDFLAGS=-s -nostdlib --no-insert-timestamp


OBJS=aout.obj aout_bytearray.obj atari.obj atari_bytearray.obj \
    bytearray.obj cms.obj coff.obj coff_bytearray.obj elf.obj \
    elf_bytearray.obj error.obj febc.obj hashtab.obj hunk.obj \
    ld.obj libld.obj link.obj lx.obj lx_bytearray.obj \
    mainframe.obj map.obj read.obj sections.obj symbols.obj \
    tebc.obj vse.obj xmalloc.obj int64sup.obj

TARGET=pdld.exe

all: clean $(TARGET)

$(TARGET): $(OBJS)
  $(AR) s temp.lib
  $(LD) $(LDFLAGS) -o $(TARGET) $(EXTRA1) ld.obj temp.lib $(EXTRA2)

.c.obj:
  $(CC) $(COPTS) -o $*.s $<
  $(AS) -o $@ $*.s
  $(AR) r temp.lib $@
  rm -f $*.s

clean:
  rm -f temp.lib
  rm -f *.obj $(TARGET)

BOOTSTRAP_AS=aswin
BOOTSTRAP_LD=ldwin

bootstrap: set_bootstrap all

set_bootstrap:
  $(eval AS=$(BOOTSTRAP_AS))
  $(eval LD=$(BOOTSTRAP_LD))
