// grammar for ANSI C

// a*    : 0 or more time a
// a?    : 0 or 1 time a
// (a b) : grouping expression a and b
// a|b   : either a or b
// "a"   : terminal token a

translation_unit:	external_declaration*

external_declaration:	function_definition | declaration

function_definition:	declaration_specifiers? declarator 
			declaration_list? compound_statement

declaration:		declaration_specifiers init_declaration_list? ";"

declaration_list:	declaration declaration*

declaration_specifiers:	(storage_class_specifier | type_specifier | 
			type_qualifier)  (storage_class_specifier | 
			type_specifier | type_qualifier)*

storage_class_specifier:	"auto" | "register" | "static" | "extern" |
				"typedef"

type_specifier:		"void" | "char" | "short" | "int" | "long" | "float" |
			"double" | "signed" | "unsigned" |
			struct_or_union_specifier | enum_specifier  |
			typedef_name

type_qualifier:		"const" | "volatile"

struct_or_union_specifier:	struct_or_union 
				(identifier? "{" struct_declaration_list "}") |
				identifier

struct_or_union:	"struct" | "union"

struct_declaration_list:	struct_declaration struct_declaration*

init_declaration_list:	init_declarator ( "," init_declarator)*

init_declarator:	declarator ("=" initializer)?

struct_declaration:	specifier_qualifier_list struct_declarator_list ";"

specifier_qualifier_list:	(type_specifier | type_qualifier)
				(type_specifier | type_qualifier)*

struct_declarator_list:		struct_declarator ( "," struct_declarator)*

struct_declarator:	declarator | 
			(declarator? ":" constant_expression)

enum_specifier:		"enum" identifier | 
			(identifier? "{" enumerator_list "}")

enumerator_list:	enumerator ( "," enumerator)*

enumerator:		identifier ("=" constant_expression)?

declarator:		pointer? direct_declarator

direct_declarator:	direct_declarator1 | direct_declarator2

direct_declarator2:	(direct_declarator "[" constant_expression? "]") |
			(direct_declarator "(" parameter_type_list  ")") |
			(direct_declarator "(" identifier_list?  ")") 

direct_declarator1:	identifier | ("(" declarator ")")

pointer:		"*" type_qualifier_list? ("*" type_qualifier_list?)*

type_qualifier_list:	type_qualifier type_qualifier*

parameter_type_list:	parameter_list ( "," "...")?

parameter_list:		parameter_declaration ( "," parameter_declaration)*

parameter_declaration:	declaration_specifiers 
			declarator | abstract_declarator?

identifier_list:	identifier ( "," identifier)*

initializer:		assignment_expression |
			("{" initializer_list  ","? "}")

initializer_list:	initializer ( "," initializer)*

type_name:		specifier_qualifier_list abstract_declarator?

abstract_declarator:	pointer | (pointer? direct_abstract_declarator)

direct_abstract_declarator:	("(" abstract_declarator ")") |
				(("(" abstract_declarator ")")? 
				  (("[" constant_expression? "]") |
				   ("(" parameter_type_list? ")")))*

typedef_name:		identifier

statement:		labeled_statement |
			expression_statement |		
			compound_statement |		
			selection_statement |		
			iteration_statement |		
			jump_statement
			
labeled_statement:	(identifier ":" statement) |
			("case" constant_expression ":" statement) |
			("default" ":" statement)

expression_statement:	expression? ";"

compound_statement:	"{" declaration_list? statement_list? "}"

statement_list:		statement statement*

selection_statement:	("if" "(" expression ")" statement 
			       ("else" statement)?) |
			("switch" "(" expression ")" statement)

iteration_statement:	("while" "(" expression ")" statement) |
			("do" statement "while" "(" expression ")" ";") |
			("for" "(" expression? ";" expression? ";" expression?
			  ")" statement)
		
jump_statement:		("goto" identifier ";") |
			("continue" ";") |
			("break" ";") |
			("return" expression ";")

expression:		assignment_expression ( "," assignment_expression)* 

assignment_expression:	conditional_expression |
			((unary_expression assignment_operator)* 
			  conditional_expression)

assignment_operator:	"=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" |
			">>=" | "&=" | "^=" | "|="

conditional_expression:	logical_or_expression 
			("?" expression ":" ("?" expression ":")* 
			  logical_or_expression)? 

constant_expression:	conditional_expression

logical_or_expression:	logical_and_expression ("||" logical_and_expression)*

logical_and_expression:	inclusive_or_expression | 
			("&&" inclusive_or_expression)* 

inclusive_or_expression:	exclusive_or_expression 
				("|" exclusive_or_expression)*

exclusive_or_expression:	and_expression ("^" and_expression)*

and_expression:		equality_expression ("&" equality_expression)*

equality_expression:	relational_expression 
			("==" | "!=" relational_expression)*

relational_expression:	shift_expression 
			("<" | ">" | "<=" | ">=" shift_expression)*

shift_expression:	additive_expression ("<<" | ">>" additive_expression)*

additive_expression:	multiplicative_expression 
			("+" | "-" multiplicative_expression)*

multiplicative_expression:	cast_expression
				("*" | "/" | "%" cast_expression)

cast_expression:	("(" type_name ")")* unary_expression

unary_expression:	unary_expression1 | unary_expression2
			
unary_expression1:	postfix_expression |
			(unary_operator cast_expression) |
			("sizeof" "(" type_name ")")

unary_expression2:	"++" | "--" | "sizeof" unary_expression 

unary_operator:		"&" | "*" | "+" | "-" | "~" | "!"

postfix_expression:	primary_expression |
			(postfix_expression
			 ("[" expression "]") |
			 ("(" argument_expression_list? ")") |
			 ("." identifier) |
			 ("->" identifier) |
			 "++" | "--")

primary_expression:	identifier | constant | string_literal | 
			("(" expression ")")

argument_expression_list:	assignment_expression 
				( "," assignment_expression)*

constant:		integer_constant | character_constant |
			floating_constant | enumeration_constant

//integer_constant:
//character_constant:
//floating_constant: 
//enumeration_constant: 
//string_literal:
//identifier:

// https://www.cs.uic.edu/~i109/Notes/COperatorPrecedenceTable.pdf
"!="=	NOTEQ	"10lr";
"!"=	XMARK	"10rl";
"%="=	ASMOD	"3rl";
"%"=	MOD	"14lr";
"&&"=	LOGAND	"6lr";
"&="=	ASAND	"3rl";
"&"=	AMPER	"16rl";
//"&"= .and_expression 		BITWISEAND	"9lr";
//"("= .cast_expression 		LCAST		"16rl";
//")"= .cast_expression 		RCAST		"16rl";
"("=	LPAREN	"17lr";
")"=	RPAREN	"17lr";
"*="=	ASMUL	"3rl";
"*"=	MUL	"14lr";
//"*"= .pointer 			STAR 		"16rl";
"++"=	INCR	"16rl";
//"++"= .postfix_expression	POSTINCR	"17lr";
"+="=	ASPLUS	"3rl";
"+"=	PLUS	"16rl"
//"+"= .additive_expression	ADD		"13lr";
","=	COMMA	"1lr";
"--"=	DECR	"16rl";
"-="=	ASMINUS	"3rl";
"->"=	ARROW	"17lr";
"-"=	MINUS	"16rl";
//"-"= .additive_expression	SUB		"13lr";
"/="=	ASDIV	"3rl";
"/"=	SLASH	"14lr";
":"=	COLON	"none";
//":"= .conditional_expression	COLON		"4rl";
"?"=	QMARK	"4rl";
";"=	SEMI	"none";
"<<="=	ASLSHIFT	"3rl";
"<<"=	LSHIFT	"12lr";
"<="=	LTEQ	"11lr";
"<"=	LESS	"11lr";
"=="=	EQUAL	"10lr";
"="=	ASSIGN	"3rl";
">>="=	ASRSHIFT	"3rl";
">>"=	RSHIFT	"12lr";
">="=	GTEQ	"11lr";
">"=	GREATER	"11lr";
"["=	LBRACK	"17lr";
"]"=	RBRACK	"17lr";
"^="=	ASXOR	"3rl";
"^"=	CARET	"8lr";
"{"=	LBRACE	"none";
"}"=	RBRACE	"none";
"||"=	LOGOR	"5lr";
"|="=	ASOR	"3rl";
"|"=	PIPE	"7lr";
"~"=	TILDE	"16rl";
"..."=	ELLIPSIS	"none";
"."=	DOT	"17lr";

